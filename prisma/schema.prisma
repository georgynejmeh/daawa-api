generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum DishType {
  MAIN
  SIDE
  DESSERT
  APPETIZER
}

enum OrderStatus {
  REVIEW
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String @unique
  phone    String @unique
  password String // hashed
  role     Role
}

model Business {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String                  @unique
  phone                 String                  @unique
  address               String
  description           String
  image                 String
  hours                 Hours[]
  category              Category                @relation(fields: [categoryId], references: [id])
  categoryId            String                  @db.ObjectId
  dishes                Dish[]
  attributes            Attribute[]
  Collection_Businesses Collection_Businesses[]
  Order_Item            Order_Item[]
}

model Hours {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  day        Day
  start      String
  end        String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String   @db.ObjectId
}

model Category {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String     @unique // Venue, Catering, Decoration, etc.
  businesses Business[]
}

model Attribute {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  value      String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String   @db.ObjectId
}

// model VenueInfo {
//   id           String @id @default(auto()) @map("_id") @db.ObjectId
//   capacity     Int
//   rooms        Int
//   pricePerHour Float
// }

// model CateringInfo {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   dishes Dish[] // Relation to the Dish model
// }

model Dish {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  type        DishType // MAIN, SIDE, DESSERT, APPETIZER
  price       Float
  image       String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId  String   @db.ObjectId
}

model Collection {
  id                   String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  collectionBusinesses Collection_Businesses[]
}

model Collection_Businesses {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String     @db.ObjectId
  business     Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId   String     @db.ObjectId
}

model Order {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  quantity   Int
  orderItems Order_Item[]
  status     OrderStatus
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Order_Item {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  businessId String   @db.ObjectId
  price      Float
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}
